services:
    # facade service and wrapper for the repository services
    agit.localedata.provider:
        class: Agit\LocaleDataBundle\Service\ProviderService
        arguments: [@agit.localedata.currency, @agit.localedata.country, @agit.localedata.language, @agit.localedata.timezone]

    # optional Twig extension for key-value-lists of localedata
    agit.localedata.twig:
        class: Agit\LocaleDataBundle\Service\LocaleDataExtension
        tags:
            - { name: twig.extension }
        arguments:  [ @agit.localedata.provider, @agit.intl.locale ]

    #
    # repository services, to access single localedata repositories, if using
    # agit.localedata.provider is not desired
    #

    agit.localedata.currency:
        class: Doctrine\Common\Persistence\ObjectRepository
        factory_service: doctrine
        factory_method: getRepository
        arguments: [ AgitLocaleDataBundle:Currency ]

    agit.localedata.country:
        class: Doctrine\Common\Persistence\ObjectRepository
        factory_service: doctrine
        factory_method: getRepository
        arguments: [ AgitLocaleDataBundle:Country ]

    agit.localedata.language:
        class: Doctrine\Common\Persistence\ObjectRepository
        factory_service: doctrine
        factory_method: getRepository
        arguments: [ AgitLocaleDataBundle:Language ]

    agit.localedata.timezone:
        class: Doctrine\Common\Persistence\ObjectRepository
        factory_service: doctrine
        factory_method: getRepository
        arguments: [ AgitLocaleDataBundle:Timezone ]


    #
    # seed services to insert data into the DB
    #

    agit.localedata.seed.currency:
        private: true
        class: Agit\LocaleDataBundle\EventListener\CurrencySeed
        arguments: [ "@agit.intl.locale", "@agit.localedata.adapter.currency" ]
        tags: [{ name: kernel.event_listener, event: agit.seed, method: registerSeed }]

    agit.localedata.seed.country:
        private: true
        class: Agit\LocaleDataBundle\EventListener\CountrySeed
        arguments: [ "@agit.intl.locale", "@agit.localedata.adapter.country" ]
        tags: [{ name: kernel.event_listener, event: agit.seed, method: registerSeed }]

    agit.localedata.seed.language:
        private: true
        class: Agit\LocaleDataBundle\EventListener\LanguageSeed
        arguments: [ "@agit.intl.locale", "@agit.localedata.adapter.language" ]
        tags: [{ name: kernel.event_listener, event: agit.seed, method: registerSeed }]

    agit.localedata.seed.timezone:
        private: true
        class: Agit\LocaleDataBundle\EventListener\TimezoneSeed
        arguments: [ "@agit.intl.locale", "@agit.localedata.adapter.timezone" ]
        tags: [{ name: kernel.event_listener, event: agit.seed, method: registerSeed }]


    # settings (optional, only loaded if setting-bundle is installed)

    agit.order.setting.currency:
        class: Agit\LocaleDataBundle\Service\CurrencySetting
        arguments: [ "@agit.localedata.currency" ]
        tags: [{ name: agit.setting }]

    agit.order.setting.country:
        class: Agit\LocaleDataBundle\Service\CountrySetting
        arguments: [ "@agit.localedata.country" ]
        tags: [{ name: agit.setting }]

    agit.order.setting.timezone:
        class: Agit\LocaleDataBundle\Service\TimezoneSetting
        arguments: [ "@agit.localedata.timezone" ]
        tags: [{ name: agit.setting }]



    #
    # NOTE: The following services make only sense in the scope of this bundle.
    # To retrieve countries, currencies, etc., use the above repo services.
    #

    # adapter services, used for loading raw CLDR data

    agit.localedata.adapter.abstract:
        abstract: true
        calls:
            - [setLocaleService, [@agit.intl.locale]]
            - [setCldrDir, ["Resources/cldr"]]

    agit.localedata.adapter.countrycurrency:
        parent: agit.localedata.adapter.abstract
        class: Agit\LocaleDataBundle\Adapter\CountryCurrencyAdapter

    agit.localedata.adapter.currency:
        parent: agit.localedata.adapter.abstract
        class: Agit\LocaleDataBundle\Adapter\CurrencyAdapter
        arguments: [ "@agit.localedata.adapter.countrycurrency" ]

    agit.localedata.adapter.country:
        parent: agit.localedata.adapter.abstract
        class: Agit\LocaleDataBundle\Adapter\CountryAdapter
        arguments: [ "@agit.localedata.adapter.currency", "@agit.localedata.adapter.countrycurrency" ]

    agit.localedata.adapter.language:
        parent: agit.localedata.adapter.abstract
        class: Agit\LocaleDataBundle\Adapter\LanguageAdapter
        arguments: [ "@agit.localedata.adapter.country" ]

    agit.localedata.adapter.time:
        parent: agit.localedata.adapter.abstract
        class: Agit\LocaleDataBundle\Adapter\TimeAdapter

    agit.localedata.adapter.timezone:
        parent: agit.localedata.adapter.abstract
        class: Agit\LocaleDataBundle\Adapter\TimezoneAdapter
        arguments: [ "@agit.localedata.adapter.country" ]


    # registration listener for translation catalogs
    agit.localedata.catalog.register:
        class: Agit\LocaleDataBundle\EventListener\CldrCatalogListener
        arguments:
            - "@filesystem"
            - "@agit.intl.locale"
            - "@agit.localedata.adapter.currency"
            - "@agit.localedata.adapter.country"
            - "@agit.localedata.adapter.language"
            - "@agit.localedata.adapter.time"
            - "@agit.localedata.adapter.timezone"
        tags: [{ name: kernel.event_listener, event: agit.intl.translations.register, method: onRegistration }]
