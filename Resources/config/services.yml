services:

    # facade service and wrapper for the repository services
    agit.localedata.provider:
        class: Agit\LocaleDataBundle\Service\ProviderService
        arguments: [@agit.localedata.currency, @agit.localedata.country, @agit.localedata.language, @agit.localedata.timezone]

    # (optional!) Twig extension for key-value-lists of localedata
    agit.localedata.twig:
        class: Agit\LocaleDataBundle\Twig\LocaleDataExtension
        tags:
            - { name: twig.extension }
        arguments:  [ @agit.localedata.provider, @agit.intl.locale ]

    #
    # repository services, to access single localedata repositories, if using
    # agit.localedata.provider is not desired
    #

    agit.localedata.currency:
        class: Doctrine\Common\Persistence\ObjectRepository
        factory_service: doctrine
        factory_method: getRepository
        arguments: [ AgitLocaleDataBundle:Currency ]

    agit.localedata.country:
        class: Doctrine\Common\Persistence\ObjectRepository
        factory_service: doctrine
        factory_method: getRepository
        arguments: [ AgitLocaleDataBundle:Country ]

    agit.localedata.language:
        class: Doctrine\Common\Persistence\ObjectRepository
        factory_service: doctrine
        factory_method: getRepository
        arguments: [ AgitLocaleDataBundle:Language ]

    agit.localedata.timezone:
        class: Doctrine\Common\Persistence\ObjectRepository
        factory_service: doctrine
        factory_method: getRepository
        arguments: [ AgitLocaleDataBundle:Timezone ]

    #
    # NOTE: The following services make only sense in the scope of this bundle.
    # To retrieve countries, currencies, etc., use the above repo services.
    #

    # adapter services

    agit.localedata.adapter.abstract:
        abstract: true
        calls:
            - [setLocaleService, [@agit.intl.locale]]
            - [setCldrDir, ["Resources/cldr"]]

    agit.localedata.adapter.countrycurrency:
        parent: agit.localedata.adapter.abstract
        class: Agit\LocaleDataBundle\Adapter\CountryCurrencyAdapter

    agit.localedata.adapter.currency:
        parent: agit.localedata.adapter.abstract
        class: Agit\LocaleDataBundle\Adapter\CurrencyAdapter
        arguments: [@agit.localedata.adapter.countrycurrency]

    agit.localedata.adapter.country:
        parent: agit.localedata.adapter.abstract
        class: Agit\LocaleDataBundle\Adapter\CountryAdapter
        arguments: [@agit.localedata.adapter.currency, @agit.localedata.adapter.countrycurrency]

    agit.localedata.adapter.language:
        parent: agit.localedata.adapter.abstract
        class: Agit\LocaleDataBundle\Adapter\LanguageAdapter
        arguments: [@agit.localedata.adapter.country]

    agit.localedata.adapter.time:
        parent: agit.localedata.adapter.abstract
        class: Agit\LocaleDataBundle\Adapter\TimeAdapter

    agit.localedata.adapter.timezone:
        parent: agit.localedata.adapter.abstract
        class: Agit\LocaleDataBundle\Adapter\TimezoneAdapter
        arguments: [@agit.localedata.adapter.country]


    # registration listener for translation catalogs
    agit.localedata.catalog.register:
        class: Agit\LocaleDataBundle\EventListener\CldrCatalogListener
        arguments: [ @filesystem, @agit.intl.locale, @agit.localedata.adapter.currency, @agit.localedata.adapter.country, @agit.localedata.adapter.language, @agit.localedata.adapter.time, @agit.localedata.adapter.timezone ]
        tags: [{ name: kernel.event_listener, event: agit.intl.catalog.register, method: onRegistration }]

    #
    # seed registration listeners
    #

    # listening for currencies to be registered
    agit.localedata.register.currency:
        private: true
        class: SeedListener
        factory_service:  agit.pluggable.seed.listener.factory
        factory_method:   create
        arguments: [AgitLocaleDataBundle:Currency, 1]
        tags: [{ name: kernel.event_listener, event: agit.pluggable, method: onRegistration }]

    # listening for countries to be registered
    agit.localedata.register.country:
        private: true
        class: SeedListener
        factory_service:  agit.pluggable.seed.listener.factory
        factory_method:   create
        arguments: [AgitLocaleDataBundle:Country, 2]
        tags: [{ name: kernel.event_listener, event: agit.pluggable, method: onRegistration }]

    # listening for languages to be registered
    agit.localedata.register.language:
        private: true
        class: SeedListener
        factory_service:  agit.pluggable.seed.listener.factory
        factory_method:   create
        arguments: [AgitLocaleDataBundle:Language, 3]
        tags: [{ name: kernel.event_listener, event: agit.pluggable, method: onRegistration }]

    # listening for timezones to be registered
    agit.localedata.register.timezone:
        private: true
        class: SeedListener
        factory_service:  agit.pluggable.seed.listener.factory
        factory_method:   create
        arguments: [AgitLocaleDataBundle:Timezone, 3]
        tags: [{ name: kernel.event_listener, event: agit.pluggable, method: onRegistration }]


    #
    # actual seeds
    #

    # registering our own currencies
    agit.localedata.seed.currency.listener:
        private: true
        class: Agit\LocaleDataBundle\EventListener\CurrencySeedData
        arguments: [@agit.intl.locale, @agit.localedata.adapter.currency]
        tags: [{ name: kernel.event_listener, event: AgitLocaleDataBundle:Currency, method: onRegistration }]

    # registering our own countries
    agit.localedata.seed.country.listener:
        private: true
        class: Agit\LocaleDataBundle\EventListener\CountrySeedData
        arguments: [@agit.intl.locale, @agit.localedata.adapter.country]
        tags: [{ name: kernel.event_listener, event: AgitLocaleDataBundle:Country, method: onRegistration }]

    # registering our own languages
    agit.localedata.seed.language.listener:
        private: true
        class: Agit\LocaleDataBundle\EventListener\LanguageSeedData
        arguments: [@agit.intl.locale, @agit.localedata.adapter.language]
        tags: [{ name: kernel.event_listener, event: AgitLocaleDataBundle:Language, method: onRegistration }]

    # registering our own timezones
    agit.localedata.seed.timezone.listener:
        private: true
        class: Agit\LocaleDataBundle\EventListener\TimezoneSeedData
        arguments: [@agit.intl.locale, @agit.localedata.adapter.timezone]
        tags: [{ name: kernel.event_listener, event: AgitLocaleDataBundle:Timezone, method: onRegistration }]
